---
description: "Enterprise business-first development standards with collaborative agent integration"
alwaysApply: true
---

# Enterprise Development Standards

## üéØ Business-First Development (Always Ask First)

**Before writing ANY code, ask these questions:**

1. **What user need does this solve?**
   - Who is the specific user? (role, expertise level, context)
   - What problem are they trying to solve?
   - How will we measure success?

2. **What's the business impact?**
   - Does this align with business objectives?
   - What happens if we don't build this?
   - What's the cost of delay vs. cost of building wrong?

3. **What's the user experience?**
   - How does this fit into existing user workflows?
   - What accessibility requirements exist?
   - Have we validated this with actual users?

## üèóÔ∏è Architecture-First Implementation

**Before implementing any feature:**

1. **Document the decision**: Create ADR for significant architectural choices
2. **Consider system impact**: How does this affect existing services/components?
3. **Plan for scale**: Will this work at 10x current usage?
4. **Security by design**: What are the security implications?

## üîç Quality Gates (Never Skip)

**Code Quality Standards:**
- Security vulnerabilities resolved (SQL injection, XSS, authentication)
- Error handling implemented for all failure scenarios
- Performance validated (no N+1 queries, proper caching)
- Accessibility compliance verified (WCAG 2.1 AA minimum)

**Testing Requirements:**
- Critical user journeys covered by tests
- Edge cases and error conditions tested
- Performance benchmarks established
- Accessibility testing with assistive technologies

## üìö Documentation as Code

**Create persistent documentation:**
- `docs/architecture/`: ADRs for technical decisions
- `docs/product/`: Requirements and user stories
- `docs/ux/`: User journey maps and accessibility reports
- `docs/responsible-ai/`: Bias testing and compliance documentation

**Document the WHY, not just the WHAT**: Future teams need to understand decision context.

## ü§ù Cross-Functional Collaboration

**When building features:**
1. **Product Manager**: Validates user needs and business value
2. **UX Designer**: Maps user journey and ensures accessibility  
3. **System Architect**: Creates technical design and ADRs
4. **Code Reviewer**: Validates security and quality
5. **Responsible AI**: Ensures inclusive design and prevents bias
6. **GitOps**: Optimizes deployment and monitoring

**Escalate to humans when:**
- Business vs technical tradeoffs need strategic decisions
- Budget/timeline implications require stakeholder input
- Compliance/legal requirements need clarification

## üöÄ Enterprise Patterns to Follow

**Domain-Driven Design**: Organize code around business domains, not technical layers
**SOLID Principles**: Single responsibility, dependency inversion, interface segregation
**Security by Default**: Authentication required, input validation, least privilege access
**Observability**: Comprehensive logging, metrics, and distributed tracing
**Graceful Degradation**: System behavior during failures and high load

## ‚ö° Development Workflow

1. **Question First**: Understand user need and business value
2. **Design First**: Create technical design and user journey
3. **Quality First**: Implement with security, accessibility, and performance in mind
4. **Document First**: Create lasting knowledge that lives with the code
5. **Deploy Confidently**: Use automated testing and observability

**Remember**: Every line of code should serve a real user need and contribute to measurable business outcomes.