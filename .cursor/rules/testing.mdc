---
description: "Testing standards and patterns"
globs:
  - "tests/**/*"
  - "test/**/*"
  - "spec/**/*"
  - "*.test.*"
  - "*.spec.*"
  - "**/test_*.py"
  - "**/test_*.js"
  - "**/test_*.ts"
---

# Testing Rules

## Pre-Commit Validation (MANDATORY)
**NOTE**: This will be customized during bootstrap based on your project's validation tooling.

Always run validation before committing - customize command based on your project setup:
- `[your validation command]` (e.g., `npm test`, `pytest`, `go test ./...`)

## Test Requirements (Adapt to Your Project)

### Coverage Standards
- Maintain test coverage appropriate to your project's criticality
- Focus coverage on business-critical and high-risk components
- Use coverage tools appropriate to your technology stack

### Quality Gates
- All tests must pass before commit
- Follow established test patterns for your framework
- Test both success and error conditions
- Validate edge cases relevant to your domain

## Test Patterns (Technology-Specific)

### General Testing Principles
- **Arrange, Act, Assert**: Structure tests clearly
- **Independent Tests**: Each test should run independently
- **Descriptive Names**: Test names should describe behavior being tested
- **Focused Tests**: Each test should validate one specific behavior

## Enterprise Testing Patterns
- **Test Pyramid**: Unit tests (base), integration tests (middle), e2e tests (top)
- **Continuous Integration**: Automated quality gates and test execution
- **Feature Flags**: Safe deployment and rollback capabilities through testing
- **Performance Testing**: Load testing, stress testing, performance budgets
- **Security Testing**: Automated security tests, vulnerability scanning integration

## Agent-Enhanced Testing
- **Test Validation**: Use product-manager-advisor to validate tests against business requirements
- **Architecture Testing**: Use system-architecture-reviewer for integration test design
- **Code Quality**: Use code-reviewer to ensure tests follow best practices
- **CI/CD Integration**: Use gitops-ci-specialist for test pipeline optimization

## Best Practices
1. **Test-Driven Development**: Write tests before or alongside implementation
2. **Maintainable Tests**: Keep tests simple and focused
3. **Fast Feedback**: Optimize test execution time
4. **Reliable Tests**: Eliminate flaky or intermittent test failures
5. **Comprehensive Coverage**: Test all critical paths and edge cases
6. **Agent Coordination**: Use engineering team agents to enhance test strategy and implementation